# first, install Cypress, then run all tests (in parallel)
stages:
  - build
  - test

# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules

# this job installs NPM dependencies and Cypress
# https://github.com/cypress-io/cypress-docker-images/tree/master/included - cypress-docker-images
install:
  image: cypress/browsers:node12.18.3-chrome87-ff82
  stage: build

  script:
    - npm ci
    # check Cypress binary path and cached versions
    # useful to make sure we are not carrying around old versions
    - npx cypress cache path
    - npx cypress cache list
    - $(npm bin)/print-env CI
    - npm run cypress:verify
    - npm run cypress:info

# all jobs that actually run tests can use the same definition
.cypress-e2e-chrome: &cypress_definition
  image: cypress/browsers:node12.18.3-chrome87-ff82
  stage: test
  #parallel: 10
  script:
      # print CI environment variables for reference
    - $(npm bin)/print-env CI

    # run Cypress test in load balancing mode
    - npm run e2e:record:chrome -- --parallel

  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - videos/**/*.mp4
      - screenshots/**/*.png
    reports:
      junit:
        - results/TEST-*.xml
  
  only: 
    - master


# actual job definitions
# all steps are the same, they come from the template above
chromes-1:
  extends: .cypress-e2e-chrome
chromes-2:
  extends: .cypress-e2e-chrome